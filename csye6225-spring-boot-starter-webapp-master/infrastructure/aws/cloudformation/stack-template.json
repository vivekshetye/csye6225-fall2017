{
"AWSTemplateFormatVersion":"2010-09-09",
"Description": "Cloud Formation Template",
"Parameters": {
        "imgId": {
            "Description": "imageId",
            "Type": "String"
        },
        "vpcId": {
            "Description": "vpcId",
            "Type": "String"
        },
        "InstType": {
            "Description": "Instance type",
            "Type": "String"
        },
        "volumeSize": {
            "Description": "Volume size",
            "Type": "String"              
        },
        "volumeType": {
            "Description": "Volume type",
            "Type": "String"
        },
        "keyName": {
            "Description": "keyName",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "hostedZoneId": {
            "Description": "Hosted Zone Id",
            "Type": "String"      
        },
        "dnsName": {
            "Description": "DNS name",
            "Type": "String"          
        },
        "recordSetType": {
            "Description": "Record set type",
            "Type": "String"      
        },
        "recordSetTTL": {
            "Description": "Record set time to live",
            "Type": "String"      
        },
    "rdsParamUsername": {
            "Description": "Rds username",
            "Type": "String"      
        },
        "rdsParamPassword": {  
            "Description": "Rds password",
            "Type": "String"      
        },
    "bucketName": {
            "Description": "DNS name",
            "Type": "String"          
        }
},

"Resources": {

"RDSConnectPolicy": {
    "Type":"AWS::IAM::ManagedPolicy",
   
    "Properties" : {
        "PolicyDocument" : {
   
    "Version" : "2012-10-17",
    "Statement" : [
        {   
            "Sid":"Stmt1508975155000",
            "Effect":"Allow",
            "Action":[
                "rds-db:connect"           
            ],
            "Resource": [
                "*"
            ]
        }

        ]   
       
},
"Users" : [ "dbuser2"],
    "ManagedPolicyName": "AWS_RDS_IAM_2"
}

},

"insProfile":{
         "Type":"AWS::IAM::InstanceProfile",
         "Properties":{
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole2",
		  "Ref": "CloudWatchRole"
               }
            ]
         }
      },
      "CodeDeployEC2ServiceRole2":{
         "Type":"AWS::IAM::Role",
         "Properties":{
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
            "arn:aws:iam::aws:policy/AmazonS3FullAccess",
            "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        ],
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/"
         }
      },

   "CloudWatchRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CloudWatchPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudWatchLogsPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:Create*",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:logs:*:*:*",
                "arn:aws:s3:::*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CloudWatchRole"
          }
        ]
      }
    },
      "WebServerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": 7
            }
        },

      "CodeDeployEC2S33":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"CodeDeployEC2S33",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Action":[
                        "s3:Get*",
                        "s3:List*"
                     ],
                     "Effect":"Allow",
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"CodeDeployEC2ServiceRole2"
               }
            ]
         }
      },
      "CodeDeployServiceRole2":{
         "Type":"AWS::IAM::Role",
         "Properties":{
            "AssumeRolePolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Principal":{
                        "Service":[
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action":[
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/"
         }
      },
"Lambda":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                "arn:aws:iam::aws:policy/AmazonSESFullAccess"],
        "RoleName":"Lambda"
      }
},
      "AWSCodeDeployRole":{
         "Type":"AWS::IAM::Policy",
         "Properties":{
            "PolicyName":"AWSCodeDeployRole2",
            "PolicyDocument":{
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "autoscaling:CompleteLifecycleAction",
                        "autoscaling:DeleteLifecycleHook",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:DescribeLifecycleHooks",
                        "autoscaling:PutLifecycleHook",
                        "autoscaling:RecordLifecycleActionHeartbeat",
                        "autoscaling:CreateAutoScalingGroup",
                        "autoscaling:UpdateAutoScalingGroup",
                        "autoscaling:EnableMetricsCollection",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:DescribePolicies",
                        "autoscaling:DescribeScheduledActions",
                        "autoscaling:DescribeNotificationConfigurations",
                        "autoscaling:DescribeLifecycleHooks",
                        "autoscaling:SuspendProcesses",
                        "autoscaling:ResumeProcesses",
                        "autoscaling:AttachLoadBalancers",
                        "autoscaling:PutScalingPolicy",
                        "autoscaling:PutScheduledUpdateGroupAction",
                        "autoscaling:PutNotificationConfiguration",
                        "autoscaling:PutLifecycleHook",
                        "autoscaling:DescribeScalingActivities",
                        "autoscaling:DeleteAutoScalingGroup",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceStatus",
                        "ec2:TerminateInstances",
                        "tag:GetTags",
                        "tag:GetResources",
                        "sns:Publish",
                        "cloudwatch:DescribeAlarms",
                        "cloudwatch:PutMetricAlarm",
                        "elasticloadbalancing:DescribeLoadBalancers",
                        "elasticloadbalancing:DescribeInstanceHealth",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets",
                        "elasticloadbalancing:DeregisterTargets"
                     ],
                     "Resource":"*"
                  }
               ]
            },
            "Roles":[
               {
                  "Ref":"CodeDeployServiceRole2"
               }
            ]
         }
      },

        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
    "IamInstanceProfile" : {
        "Ref":"insProfile"           
        },
        "KeyName" : {"Ref": "keyName"},
    "Tags": [
        {
            "Key":"course",
            "Value" : "csye6225"
        }
],
                "ImageId": {"Ref": "imgId"},
                "InstanceType": {"Ref": "InstType"},
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "csye6225webapp",
                            "GroupId"
                        ]
                    }
                ],
        "DisableApiTermination": "TRUE",
        "BlockDeviceMappings" : [
                {
                "DeviceName" : "/dev/sda1",
                "Ebs" : {
                          "DeleteOnTermination": true,
                          "VolumeSize": {"Ref": "volumeSize"},
                          "VolumeType": {"Ref": "volumeType"}
                        }
                }
                ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -v \n",
                "apt-get update \n",
                "apt-get install default-jdk -y \n",
                "update-alternatives --config java \n",
                "echo JAVA_HOME='/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java' >> /etc/environment \n",
                "echo 'export JAVA_HOME' >> /etc/environment \n",
                "source /etc/environment \n",
                "apt-get install curl -y \n",
               
   
               
                "sudo apt-get install tomcat8 -y \n",
                "echo '#!/bin/sh' >> /usr/share/tomcat8/bin/setenv.sh \n",
{"Fn::Join":["",["echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",{"Fn::GetAtt":["DBInstance","Endpoint.Address"]},":3306/csye6225fall2017\"\"'>> /usr/share/tomcat8/bin/setenv.sh \n"]]},
          
            "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=\"",{"Ref":"rdsParamUsername"},"\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
            "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=\"",{"Ref":"rdsParamPassword"},"\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
        "echo 'JAVA_OPTS=\"$JAVA_OPTS -DbucketName=\"",
        {
            "Ref": "bucketName"
        },
        "\"\"' >> /usr/share/tomcat8/bin/setenv.sh \n",
                "chmod -R 777 bin/* \n",
   
                "apt-get install ruby -y\n",
                "cd /home/ubuntu \n",
                "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                "chmod +x ./install \n",
                "./install auto",
"cd /home/ubuntu \n",
                              "curl -O https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                              "chmod +x ./install \n",
                              "./install auto \n",
                              "apt-get update -y \n",
                              "apt-get install python -y \n",
           	"echo '[general]' > /tmp/apacheaccess.conf \n",
                "echo 'state_file= /var/awslogs/agent-state' >> /tmp/apacheaccess.conf \n\n",
                "echo '[/var/logs/awslogs.log]' >> /tmp/apacheaccess.conf \n",
                "echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/apacheaccess.conf \n",
                "echo 'file = /var/log/tomcat8/catalina.out' >> /tmp/apacheaccess.conf \n",
                "echo 'buffer_duration = 5000' >> /tmp/apacheaccess.conf \n",
                "echo 'log_stream_name = test' >> /tmp/apacheaccess.conf \n",
                "echo 'initial_position = start_of_file' >> /tmp/apacheaccess.conf \n",
                "echo 'log_group_name = ",
                {
                  "Ref": "WebServerLogGroup"
                },
                "' >> /tmp/apacheaccess.conf \n",
                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py \n",
                "python awslogs-agent-setup.py -n -r ",
                {
                  "Ref": "AWS::Region"
                },
                " -c /tmp/apacheaccess.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "cd /etc/systemd/system \n",
                "echo '[Unit]' > /etc/systemd/system/awslogs.service \n",
                "echo 'Description=Service for CloudWatch Logs agent' >> /etc/systemd/system/awslogs.service \n",
                "echo 'After=rc-local.service' >> /etc/systemd/system/awslogs.service \n",
                "echo '[Service]' >> /etc/systemd/system/awslogs.service \n",
                "echo 'Type=simple' >> /etc/systemd/system/awslogs.service \n",
                "echo 'Restart=always' >> /etc/systemd/system/awslogs.service \n",
                "echo 'KillMode=process' >> /etc/systemd/system/awslogs.service \n",
                "echo 'TimeoutSec=infinity' >> /etc/systemd/system/awslogs.service \n",
                "echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> /etc/systemd/system/awslogs.service \n",
                "echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> /etc/systemd/system/awslogs.service \n",
                "echo '[Install]' >> /etc/systemd/system/awslogs.service \n",
                "echo 'WantedBy=multi-user.target' >> /etc/systemd/system/awslogs.service \n",
                "systemctl start awslogs.service \n"
		  ]
  	        ]
              }
            }
         }    
},

"MySNSTopic" : {
   "Type" : "AWS::SNS::Topic",
   "Properties" : {
      "TopicName" : "password_reset"
}
},

"ResourceRecordSet" : {
    "Type" : "AWS::Route53::RecordSet",
    "Properties" : {
        "HostedZoneId" : {"Ref": "hostedZoneId"},
        "Comment" : "DNS name for my instance.",
        "Name" : {"Ref": "dnsName"},
        "Type" : {"Ref": "recordSetType"},
        "TTL" : {"Ref": "recordSetTTL"},
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] } ]
    }
},

"Subnet1" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
       "VpcId" : {"Ref": "vpcId"},
       "CidrBlock": "172.31.128.0/20",
       "AvailabilityZone" : "us-east-1e"
        }
},

"Subnet2" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
       "VpcId" : {"Ref": "vpcId"},
       "CidrBlock": "172.31.112.0/20",
       "AvailabilityZone" : "us-east-1b"
      }
},
  
"DBSubnetGroup" : {
       "Type" : "AWS::RDS::DBSubnetGroup",
       "Properties" : {
          "DBSubnetGroupDescription" : "description",
          "SubnetIds" : [{"Ref" : "Subnet1"},{"Ref" : "Subnet2"}]
       }
},

"csye6225webapp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {              
           "GroupDescription": "Enable HTTP access via port 80, SSH access via port 22, HTTPS access via port 443",
           "VpcId": {"Ref": "vpcId"},
           "SecurityGroupIngress": [
                 {
                  "IpProtocol": "tcp",
                  "FromPort": "80",
                  "ToPort": "80",
                  "CidrIp": "0.0.0.0/0"
                  },
                  {
                  "IpProtocol": "tcp",
                  "FromPort": "22",
                  "ToPort": "22",
                  "CidrIp": "0.0.0.0/0"
                  },
                  {
                  "IpProtocol": "tcp",
                  "FromPort": "443",
                  "ToPort": "443",
                  "CidrIp": "0.0.0.0/0"
                  },
         {
        "IpProtocol": "tcp",
                  "FromPort": "8080",
                  "ToPort": "8080",
                  "CidrIp": "0.0.0.0/0"
         }
                ]
            }
},
 "RDSSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Open database for access",
            "GroupName": "csye6225rds",
            "SecurityGroupIngress": [{
              "IpProtocol": "tcp",
              "FromPort": "3306",
              "ToPort": "3306",
              "SourceSecurityGroupId": {
                "Fn::GetAtt": ["csye6225webapp", "GroupId"]
              }
            }]
          }
},
"DynamoDBTable" :{
      "Type": "AWS::DynamoDB::Table",
      "Properties" : {
    "AttributeDefinitions" : [
        {
            "AttributeName" : "userId",
            "AttributeType" : "S" 
        }     
        ],
      "KeySchema" : [
        {
            "AttributeName" : "userId",
            "KeyType" : "HASH"
        }],
    "ProvisionedThroughput" : {
            "ReadCapacityUnits" : "5",
            "WriteCapacityUnits" : "5"
        },
"TimeToLiveSpecification": {
    "AttributeName": "TTL",
    "Enabled": "TRUE"
  },
    "TableName" : "csye6225fall2017"
     }
},

"S3Bucket" : {
      "Type": "AWS::S3::Bucket",
      "Properties" : {
      "BucketName" : {"Ref": "bucketName"}}
},
"DBInstance" : {
    "Type" : "AWS::RDS::DBInstance",
    "Properties" : {
    "AllocatedStorage" :"100",
    "DBName" : "csye6225fall2017",
    "DBInstanceClass" : "db.t2.medium",
    "DBInstanceIdentifier" : "csye6225-fall2017",
    "DBSubnetGroupName": {"Ref": "DBSubnetGroup"},
     "VPCSecurityGroups": [{
              "Fn::GetAtt": ["RDSSecurityGroup", "GroupId"]
            }],
    "Engine" : "MySQL",
    "MasterUsername" : {"Ref" : "rdsParamUsername"},
    "MasterUserPassword" : {"Ref" : "rdsParamPassword"},
    "MultiAZ" : "FALSE",
    "PubliclyAccessible" : "FALSE"
    }
}
}
}
